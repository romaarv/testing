# Generated by Django 3.0.6 on 2020-05-24 22:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Пользователь подтвержден?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Ответ')),
                ('is_true', models.BooleanField(db_index=True, default=False, verbose_name='Верный ответ?')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exams', to='main.Answer', verbose_name='Выбор ответа')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=25, verbose_name='Название предмета')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название теста')),
                ('max_score', models.PositiveIntegerField(default=12, verbose_name='Максимальная оценка теста')),
                ('content', models.TextField(verbose_name='Описание теста')),
                ('is_active', models.BooleanField(db_index=True, default=False, verbose_name='Тест опубликован?')),
                ('public_at', models.DateTimeField(blank=True, db_index=True, default=None, verbose_name='Дата публикации теста')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tests', to='main.Lesson', verbose_name='Предмет')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_start', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Начало теста')),
                ('test_end', models.DateTimeField(blank=True, db_index=True, default=None, verbose_name='Окончание теста')),
                ('test_score', models.PositiveIntegerField(blank=True, db_index=True, default=None, verbose_name='Набранная оценка')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Exam')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Task')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Вопрос')),
                ('score', models.FloatField(default=1.0, verbose_name='Оценка за правильный ответ')),
                ('variant', models.PositiveIntegerField(db_index=True, default=1, verbose_name='№ варианта')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='questions', to='main.Task', verbose_name='Тест')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='tasks',
            field=models.ManyToManyField(through='main.Test', to='main.Task'),
        ),
        migrations.AddField(
            model_name='exam',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='main.Question', verbose_name='Вопрос'),
        ),
    ]
